'''
问的是有多少种不同的R1选择

在我们遍历I，选出符合R1之后，求出S1，
用sum(A) - S1就能求出S2，看是否都是偶数


dp[i] => 长度为i的R1有多少个

'''
'''
用数学计数

对于N个数字，我们可以考虑选不选，每一个数
都有两个选择权，总共有2**N种组合

对于A:

1. 奇数的总数是奇数，没有办法组合成R1和R2总和为
偶数的。因为奇数总会多出一个出来污染偶数和

2. 奇数的总和是偶数，把奇数要成对出现，把一对看成一个
这种情况只有 2 ** (n-1)种组合

3. 奇数的个数为0，剩下的偶数任意组合, 2**n种组合

if x & 1 == 1:
    是奇数
'''

MOD = 10 ** 9 + 7
t = int(input())
for _ in range(t):
    n = int(input())
    a = list(map(int, input().split()))
    # 记录奇数的个数
    cnt = 0
    for num in a:
        if num & 1 == 1:
            cnt += 1
    if cnt == 0:
        print((2 ** n) % MOD)
    elif cnt % 2 == 0:
        print((2 ** (n-1)) % MOD)
    else:
        print(0)










